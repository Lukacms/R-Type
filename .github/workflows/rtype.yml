name: CI R-Type
on:
  push:
    branches-ignore:
      - feature/ignore/**
  pull_request:
    branches-ignore:
      - feature/ignore/**

  workflow_dispatch:

env:
  MIRROR_URL: "git@github.com:EpitechPromo2026/B-CPP-500-BDX-5-2-rtype-luka.camus.git"
  EXECUTABLE: "r-type_server,r-type_client"
  CLCACHE_VERSION: v1
  CLCACHE_MAX_SIZE: 500M


jobs:
  check_repository_cleanliness:
    name: Check if the repository is clean and void of any unwanted files (temp, files, binary files, etc.)
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Scan files
      run: |
        arr=($(find . \( -name "#*#" -o -name "*~" \
        -o -name "*.o" -o -name "*.a" -o -name "*.hi" \
        -o -name "*.so" -o -name "*.gcno" -o -name "*.gcda" -o -name "*.gcov" \
         -o -path '*tmp/*' -o -name "__pycache__" \)))
        for i in ${arr[@]}; do echo "::error file=$i,line=1,endLine=1,title=Unwanted file detected::$i"; done
        if ((${#arr[@]})); then
          exit 1
        fi

  check_status_repos:
    name: Check if all files are in the linter
    needs: check_repository_cleanliness
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: install packages
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y clang-tidy-12 ccache
        sudo update-alternatives --install /usr/bin/clang-tidy clang-tidy /usr/bin/clang-tidy-12 100
        clang++ --version
        clang-tidy --version
    - name: run linter
      run: clang-format -i --style='file:.clang-format' `find -name *.cpp -o -name *.hh -o -name *.hpp`


  job_run_program:
    name: Run cmake on ubuntu
    needs: check_status_repos
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        build: [
          {type: Debug, options: '-DRTYPE_BUILD_TESTS=true -DUSE_CLANG_TIDY=false'},
          {type: tsan, options: '-DUSE_CLANG_TIDY=false -DRTYPE_BUILD_BENCHMARKS=true'},
          {type: Release, options: '-DWARNING_FLAGS=-Wall -DUSE_CLANG_TIDY=false'}
        ]
        version: [g++13]
        cpp: [20]
    steps:

    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - uses: extractions/setup-just@v1
      with:
        just-version: 0.8 # optional semver specification, otherwise latest

    - name : Install packages
      run: |
          sudo apt-get update -qq
          sudo apt-get install -y ninja-build clang-tidy-12 ccache
          sudo update-alternatives --install /usr/bin/clang-tidy clang-tidy /usr/bin/clang-tidy-12 100
          sudo apt-get install -y --no-install-recommends libxrandr-dev libxcursor-dev libudev-dev libopenal-dev libflac-dev libvorbis-dev libgl1-mesa-dev libegl1-mesa-dev libdrm-dev libgbm-dev
          clang++ --version
          clang-tidy --version

    - name: Cache build caches
      uses: actions/cache@v3
      with:
        path: |
          .ccache
          .ctcache
          ctcache
        key: clcache-${{ env.CLCACHE_VERSION }}-${{ matrix.build.type }}-${{ github.run_id }}
        restore-keys: clcache-${{ env.CLCACHE_VERSION }}-${{ matrix.build.type }}

    - name: Configure compiler cache (ccache)
      run: |
        ccache --set-config=cache_dir=$GITHUB_WORKSPACE/.ccache
        ccache --set-config=max_size=$CLCACHE_MAX_SIZE
        ccache --set-config=compression=true
        ccache --show-config

    - name: Install newer Clang
      run: |
       wget https://apt.llvm.org/llvm.sh
       chmod +x ./llvm.sh
       sudo ./llvm.sh 17

    - name: Compilation test
      env:
        BUILD_TYPE: ${{ matrix.build.type }}
        CMAKE_OPTIONS: ${{ matrix.build.options }}
      run: |
          mkdir -p build && cd build
          cmake .. -GNinja -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_C_COMPILER=clang-17 -DCMAKE_CXX_COMPILER=clang++-17 -DCMAKE_EXPORT_COMPILE_COMMANDS=true -DCMAKE_CXX_COMPILER_LAUNCHER=ccache $CMAKE_OPTIONS
          ninja
      shell: bash
      timeout-minutes: 5

    - name: Check executable files exists
      run: |
        IFS=',' read -ra ADDR <<< $EXECUTABLES
        for i in "${ADDR[@]}"; do
          if [[ ! -x "./${i}" ]]; then
            exit 1
          fi
        done


  run_program_windows:
    name: Compile on Windows with msvc
    needs: check_status_repos
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Setup Cpp
        uses: aminya/setup-cpp@v1
        with:
          compiler: msvc
          vcvarsall: true
          cmake: true
          ninja: true
          vcpkg: true
          cppcheck: true
          clangtidy: true # instead of `true`, which chooses the default version, you can pass a specific version.
      - name: install dlfcn library
        run: |
          vcpkg install dlfcn-win32
      - name: Build project with msvc
        run: |
          echo $env:VCPKG_ROOT
          cmake -B build -GNinja -DCMAKE_BUILD_TYPE=Release -DCMAKE_EXPORT_COMPILE_COMMANDS=true -DASIO_STANDALONE=true --preset debug
          ninja -C build
        timeout-minutes: 10

  run_tests:
    name: Run tests
    needs: job_run_program
    if: ${{ github.event_name == 'pull_request' }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name : Install packages
      run: |
          sudo apt-get update -qq
          sudo apt-get install -y ninja-build clang-tidy-12 ccache
          sudo update-alternatives --install /usr/bin/clang-tidy clang-tidy /usr/bin/clang-tidy-12 100
          sudo apt-get install -y --no-install-recommends libxrandr-dev libxcursor-dev libudev-dev libopenal-dev libflac-dev libvorbis-dev libgl1-mesa-dev libegl1-mesa-dev libdrm-dev libgbm-dev
          clang++ --version
          clang-tidy --version

    - uses: extractions/setup-just@v1
      with:
        just-version: 0.8 # optional semver specification, otherwise latest

    - name: Install newer Clang
      run: |
       wget https://apt.llvm.org/llvm.sh
       chmod +x ./llvm.sh
       sudo ./llvm.sh 17

    - name: Compilation test
      run: |
        cmake -B build -GNinja -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++ -DCMAKE_EXPORT_COMPILE_COMMANDS=true -DRTYPE_BUILD_TESTS=true
        ninja -C build
      shell: bash
      timeout-minutes: 5

    - name: Run tests
      run: |
        ./tests/tests-r-type-utils
        ./tests/tests-r-type_server
        ./tests/tests-r-type_client

  push_to_mirror:
    if: ${{ github.event_name == 'push' }}
    runs-on: ubuntu-latest
    needs: job_run_program
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - uses: pixta-dev/repository-mirroring-action@v1
      with:
        target_repo_url: ${{ env.MIRROR_URL }}
        ssh_private_key:
          ${{ secrets.SSH_PRIVATE_KEY }}

  generate_doc:
    if: ${{ github.event_name == 'push' }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
    needs: check_status_repos
    steps:
    - uses: actions/setup-node@v4
      with:
        node-version: v16.x
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name : Install packages
      run: |
          sudo apt-get update -qq
          sudo apt-get install -y doxygen
          npm i

    - name: generate doxygen mans
      run: doxygen assets/scripts/doxygen
    - name: Enforce docs footer
      run: node ./assets/scripts/append-footer.js
    - uses: stefanzweifel/git-auto-commit-action@v5
      with:
        commit_message: "[DOCS] doxygen => generate doxygen mans"
        create_branch: false
