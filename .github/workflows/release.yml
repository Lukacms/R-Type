name: Build the project and publish a release

on:
  push:
    tags:
      - "v*"

jobs:

  build_program_linux:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - uses: extractions/setup-just@v1
      with:
        just-version: 0.8 # optional semver specification, otherwise latest

    - name : Install packages
      run: |
          sudo apt-get update -qq
          sudo apt-get install -y ninja-build clang-tidy-12 ccache
          sudo update-alternatives --install /usr/bin/clang-tidy clang-tidy /usr/bin/clang-tidy-12 100
          sudo apt-get install -y --no-install-recommends libxrandr-dev libxcursor-dev libudev-dev libopenal-dev libflac-dev libvorbis-dev libgl1-mesa-dev libegl1-mesa-dev libdrm-dev libgbm-dev
          clang++ --version
          clang-tidy --version

    - name: Cache build caches
      uses: actions/cache@v3
      with:
        path: |
          .ccache
          .ctcache
          ctcache
        key: clcache-${{ env.CLCACHE_VERSION }}-${{ matrix.build.type }}-${{ github.run_id }}
        restore-keys: clcache-${{ env.CLCACHE_VERSION }}-${{ matrix.build.type }}

    - name: Configure compiler cache (ccache)
      run: |
        ccache --set-config=cache_dir=$GITHUB_WORKSPACE/.ccache
        ccache --set-config=max_size=$CLCACHE_MAX_SIZE
        ccache --set-config=compression=true
        ccache --show-config

    - name: Install newer Clang
      run: |
       wget https://apt.llvm.org/llvm.sh
       chmod +x ./llvm.sh
       sudo ./llvm.sh 17

    - name: Compilation test
      env:
        BUILD_TYPE: ${{ matrix.build.type }}
        CMAKE_OPTIONS: ${{ matrix.build.options }}
      run: |
          mkdir -p build && cd build
          cmake .. -GNinja -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=clang-17 -DCMAKE_CXX_COMPILER=clang++-17 -DCMAKE_EXPORT_COMPILE_COMMANDS=true -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DWARNING_FLAGS=-Wall
          ninja
      shell: bash
      timeout-minutes: 5


  build_program_windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Setup Cpp
        uses: aminya/setup-cpp@v1
        with:
          compiler: msvc
          vcvarsall: true
          cmake: true
          ninja: true
          vcpkg: true
          cppcheck: true
          clangtidy: true
      - name: Build project with msvc
        run: |
          echo $env:VCPKG_ROOT
          cmake -B build -GNinja -DCMAKE_BUILD_TYPE=Release -DCMAKE_EXPORT_COMPILE_COMMANDS=true -DASIO_STANDALONE=true --preset debug
          ninja -C build
        timeout-minutes: 10


  create_release:
    name: Create a release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Create Release
      uses: ncipollo/release-action@v1.13.0
      with:
        artifacts: "r-type_server,r-type_client,r-type_client.exe,r-type_server.exe"
